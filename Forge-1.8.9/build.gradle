plugins {
    id "java"
    id "idea"
    id "org.jetbrains.kotlin.jvm"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "me.yuugiri.fluiditygradle"
}

repositories {
    maven {
        url = "https://ayanoyuugiri.github.io/compose-j8/"
        content {
            includeGroupByRegex "org\\.jetbrains\\.compose.*"
            includeGroupByRegex "org\\.jetbrains\\.skiko.*"
        }
    }
    mavenCentral()
    maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
    maven { url = "https://jitpack.io/" }
}

group = "me.liuli.fluidity"
archivesBaseName = "Fluidity"

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = "UTF-8"

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

configurations {
    include
    implementation.extendsFrom(include)
}

dependencies {
    include('com.github.mccheatz:HookUtility:446793c386') {
        exclude group: 'org.ow2.asm'
    }
    implementation 'org.ow2.asm:asm-all:5.0.3' // forge 1.8.9 asm version

    implementation MinecraftDependencyKt.minecraftDep(project, "core/src/main/resources/fluidity_at.cfg")
    implementation MinecraftDependencyKt.launchWrapper(project)
    implementation MinecraftDependencyKt.minecraftforge(project)

    include (project(":core")) {
        exclude module: "minecraftbin"
        exclude group: "org.ow2.asm"
    }
    include (project(":gui")) {
        exclude module: "minecraftbin"
        exclude group: "org.ow2.asm"
        exclude group: "org.jetbrains.skiko"
    }

    // ==== USED IN DEBUG ENVIRONMENT ====
    include "org.jetbrains.skiko:skiko-awt:$skiko_version"
//    implementation("org.jetbrains.compose.desktop:desktop-jvm:$compose_version") {
//        exclude module: "kotlin-stdlib"
//        exclude module: "kotlin-stdlib-common"
//        exclude module: "kotlin-stdlib-jdk8"
//        exclude module: "skiko"
//    }
//    implementation "org.jetbrains.compose.ui:ui-util:$compose_version"
    // ==== USED IN DEBUG ENVIRONMENT ====

    include fileTree(include: ["*.jar"], dir: "libs")
}

shadowJar {
    archiveClassifier.set("")
    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    exclude "META-INF/maven/**"
    exclude "META-INF/versions/**"
    exclude "META-INF/*.kotlin_module"
    exclude "META-INF/**/*.pro"
    exclude "LICENSE.txt"
    exclude "**/module-info.class"
    exclude "**/package-info.class"
    exclude "**/*.kotlin_metadata"
    exclude "**/*.kotlin_builtins"

    manifest {
        attributes["FMLCorePlugin"] = "me.liuli.fluidity.inject.FMLLoadingPlugin"
        attributes["FMLCorePluginContainsFMLMod"] = "true"
        attributes["ModSide"] = "CLIENT"
    }
}

genIntelliJRuns {
    vmParams = "-Dfml.coreMods.load=me.liuli.fluidity.inject.FMLLoadingPlugin"
}
classes.dependsOn(putObfMap)
reobfJarWithStrip.dependsOn(shadowJar)
tasks.getByName("build").dependsOn(reobfJarWithStrip)