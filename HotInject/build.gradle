import org.gradle.internal.jvm.Jvm

plugins {
    id "java"
    id "idea"
    id "org.jetbrains.kotlin.jvm"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.yuugiri.fluiditygradle"
}

repositories {
    maven {
        url = "https://mccheatz.github.io/maven_repo/"
        content {
            includeGroupByRegex "me\\.yuugiri\\.compose.*"
            includeGroupByRegex "org\\.jetbrains\\.compose.*"
            includeGroupByRegex "org\\.jetbrains\\.skiko.*"
        }
    }
    mavenCentral()
    maven { url = "https://jitpack.io/" }
}

group = "me.liuli.fluidity"
archivesBaseName = "Fluidity"

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = "UTF-8"

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

configurations {
    include
    implementation.extendsFrom(include)
}

dependencies {
    implementation MinecraftDependencyKt.minecraftDep(project, "core/src/main/resources/fluidity_at.cfg")
    // hot injection
    implementation files(Jvm.current().toolsJar)

    include (project(":Forge-1.8.9")) {
        exclude module: "minecraftbin"
    }

//    include fileTree(include: ["*.jar"], dir: "libs")
}

shadowJar {
    archiveClassifier.set("")
    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    exclude "META-INF/maven/**"
    exclude "META-INF/versions/**"
    exclude "META-INF/*.kotlin_module"
    exclude "META-INF/**/*.pro"
    exclude "LICENSE.txt"
    exclude "**/module-info.class"
    exclude "**/package-info.class"
    exclude "**/*.kotlin_metadata"
    exclude "**/*.kotlin_builtins"

    manifest {
        attributes["FMLCorePlugin"] = "me.liuli.fluidity.inject.loading.FMLLoadingPlugin"
        attributes["FMLCorePluginContainsFMLMod"] = "true"
        attributes["ModSide"] = "CLIENT"
        // hot injection
        attributes["Main-Class"] = "me.liuli.fluidity.inject.loading.JvmInjectLoaderKt"
        attributes["Agent-Class"] = "me.liuli.fluidity.inject.loading.JvmInjectLoaderKt"
        attributes["Can-Redefine-Classes"] = true
        attributes["Can-Retransform-Classes"] = true
    }
}

classes.dependsOn(putObfMap)
reobfJar.dependsOn(shadowJar)
tasks.getByName("build").dependsOn(reobfJar)